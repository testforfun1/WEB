会话管理设计：

会话的组成（tbl_SessionTable）
字段	类型	说明
SessionID	int	会话ID
UserID	int	当前会话对应的用户ID，对应表tbl_SMUser中的UserID
LoginDateTime	int	会话建立的时间（UTC时间）
TerminalID	nvarchar(32)	登录的终端ID
Status	int	会话状态（共有19种状态）
ClientType	int	客户端类型（如2000，1600）
UserState	int	用户状态（1：活动状态；2：锁定状态 ，登录成功建立会话时用户的状态就为活动状态）
isNeedShow	int	用户监控标识（0：不需要监控，一般是产品调用neLogin产生的会话；1：需要监控，在会话监控中可以看见一般是客户端登录产生的会话）
LastChangeTime	int	会话最后改变的时间（UTC时间）
AuthSessionID	nvarchar(32)	远端登录使用

安全子系统提供了会话管理的功能，通过界面实现对会话状态进行监控、通过定时任务、心跳、token鉴权对会话进综合等管理。
基本概念
心跳：用来维系一个会话存在且有效的机制，实际为时间戳的更新，标识该会话“活着”。
休眠：当服务端5分钟未收到会话的心跳，即未刷新该会话的时间戳时，将会话的状态置为SM_BE_CALLBACK 。
激活：由于某种原因使客户端和服务端断连，在有效时间范围内（30分钟）恢复连接时由前台触发来激活会话，刷新缓存中的会话信息。
重建：当会话激活时，如果在缓存中找不到该会话的信息，就会到数据库查询，以重建该会话在缓存中的信息。

（1）会话的产生
会话由用户登录产生，每次登录成功就会建立一个会话。当登录成功时返回一个token，token就是会话的标识，包含了会话的基本信息。在后续的校验中，对token的校验实际就是对会话的校验（servicetoken除外）。
从如下的trace中可以看出token包含了会话的基本信息。
LoginProcess::loginsuccess>>return token is:admin;SUPER;10.146.26.59;3880;270
会话信息会持久化到数据库中，在会话建立时会插入到表tbl_SessionTable中，该操作是在异步线程中完成的，目的是登录和数据库解耦，如此一来，当数据库发生异常时，不影响登录线程，防止登录被阻塞。

	安全子系统提供了会话管理的功能，通过token来封装会话的信息，实现鉴权等管理。
	基本概念
	token：即令牌，拥有令牌就可以做自己权限范围内的事情。
	Token & ServiceToken
	（1）token
	token：（1）userName；（2）userType；（3）terminalID；（4）userID；（5）sessionID；（6）randMark；（7）sign
	randMark（随机安全标志）：先从IPSI中获取32位随机串，如果获取失败，就取普通32位随机串（当前时间移位处理），再用SHA256算法对32位串的前16位取摘要，摘要为32位
	sign（数字签名）：用SHA256算法对前6项组成的串取32位摘要，生成数字签名
	token鉴权：SMManagerBase::checkSMToken（）
	（2）serviceToken
	_service=token：（1）moduleName；（2）localhost；（3）-1用户ID；（4）-1会话ID；（5）seed；（6）sign
	seed：取serviceName（数据库实例服务信息，如DBSVR），user（数据库用户名），password（用户密码），用SHA256算法取前32位做摘要
	sign：用SHA256算法对前5项组成的串取32位摘要，生成数字签名
	serviceToken鉴权：SMToken::isServiceToken，实际是在动态库ProductAccessMgrImpl中判定是否为serviceToken的，获取serviceToken也是在该动态库中实现的
	注意：从安全红线角度，token可以在信任域外使用，servicetoken只能在信任域内使用，并且servicetoken不记录日志。
（2）会话心跳
当登录成功建立会话后，服务端会缓存该会话的信息，缓存就意味着维护，服务端只需要维护有效的会话信息，否则会大大增加服务端的压力。那么服务端如何才能识别会话的有效性呢？“心跳”——客户端通过定时发送“心跳”来维系会话的有效性。服务端如果5分钟没有收到心跳，定时器就会触发将该会话休眠，同时将会话状态置为SM_BE_CALLBACK = 6，此后相应的鉴权（如checkToken等）操作就会失败。
客户端每1分钟向DS发一次心跳，DS将心跳缓存，每2分钟向后台发一次心跳， 客户端为什么是1分钟发一次，而DS是两分钟发一次呢？汇聚，DS发心跳给后台不是一个一个发的，而是全部下发，DS为了汇聚心跳，2分钟内所有的客户端必然会有一次心跳发到DS，此时DS汇聚了所有客户端的心跳，然后一次发送到后台刷新心跳，后台收到心跳后会刷新对应会话的时间戳，客户端调用的MRB接口为CMD_SM_SessionManager_freshSessionTimes（69516）。

（3）会话休眠
状态为SM_R_PASS会话可能会休眠：当服务端5分钟未收到会话的心跳，即未刷新该会话的时间戳时，将会话的状态置为SM_BE_CALLBACK，发送会话休眠事件2:20，会话被休眠后，相应的鉴权（如checkToken等）操作就会失败，对应的定时器为SessionCenter::handle_timeout，接口为SessionCenter::checkSessionTimeOut，定时器随服务启动时启动，每间隔1分钟检查一次；
会话被休眠后1小时，状态会被定时器修改为SM_BE_CALLBACKBYCONF，同时发送2:24（SM_SessionInfo：NotifyClearSession）事件，用来通知DS清除该会话的相关信息。
注意：必须修改密码的会话在5分钟没有收到心跳时，会将对应的会话删除； 既需要修改密码又需要更新License的会话不会刷新心跳，5分钟后就会被定时器删除。

（4）会话激活和重建
安全红线之后，会话的激活与重建只有客户端才能触发，客户端通过调用MRB接口CMD_SM_SessionManager_activeSession（69536）来激活会话。
会话可以被激活的条件：
必须是休眠状态下的会话（status为SM_BE_CALLBACK = 6），如果会话状态为SM_R_PASS，在激活会话时直接返回token有效，同时更新会话的时间戳；
会话激活的配置开关已经打开，该配置开关所在文件：$IMAP_ROOT/etc/conf/IMAP_smsvc.xml，对应的配置项为ActiveSessionFlag，不配置时，业务代码里默认是打开的（V3R1C07默认不打开，由U2000定制开关），如果配置，0表示会话失效后不再进行激活或重建会话；1表示会话失效后能够激活或重建会话；
当前时间与会话上次刷新时间不超过30分钟（30分钟是从5分钟未收到心跳将会话休眠时算起，就是5分钟后）；
满足系统策略：是否单用户模式（是单用户模式时只有当前的系统管理员可以来激活）、是否单会话模式、是否超过license的最大连接数、是否超过用户组的最大会话数；
满足用户策略：用户是否有效、用户是否在有效登录时段。
单会话在缓存找不到时，就需要重建会话，会话可以重建的条件：
会话激活的配置开关已经打开；
当前时间与安全服务启动时间不超过30分钟；
该会话信息已经持久化在数据库中；
会话状态为在线（SM_R_PASS）或休眠（SM_BE_CALLBACK ）；
如果是休眠状态的会话，当前时间与上次刷新时间不能超过30分钟；
该会话的用户必须存在；
license是否有效；
满足系统策略：是否单用户模式（是单用户模式时只有当前的系统管理员可以来激活）、是否单会话模式、是否超过license的最大连接数、是否超过用户组的最大会话数；
满足用户策略：用户是否有效、用户是否在有效登录时段；
客户端类型是否正确、激活后是否超过license最大连接数。
（5）安全服务重启对会话的影响
会话信息会持久化到数据库中，当会话状态发生变更时，会及时更新到数据库中，因此一般情况下数据库中的会话都与缓存中一致，当服务停止，缓存清空后，所有会话的信息都已经存放在数据库了，当服务启动后，会话的信息仍然可以恢复。
当服务重启后，客户端会自动连接上服务端，仍然可以正常操作，且看这一过程是如何保证的。当服务重启后，所有的会话信息在缓存中被清除，客户端会主动调用MRB接口CMD_SM_SessionManager_activeSession来激活或者重建当前会话。如果安全服务和DS服务都重启，客户端会新起线程监控DS，一旦和DS连接上，客户端会主动调用MRB接口来重建会话；如果仅有安全服务重启，在安全服务起来时会主动发送服务启动消息（框架向前台发送），客户端收到消息后再主动调用MRB接口来重建会话。
安全服务正常停止时，所有的在线会话都会被设置为休眠，并保存在数据库中，重新激活后再将状态更新为在线。
（6）会话的退出
当客户端退出或者调用SessionManagerImpl中的退出接口logout时，会话就会退出，同时清除缓存中对应的会话信息，数据库表tbl_SessionTable中对应的会话记录也会被删除，同登录一样，退出时删除会话也是在异步线程中完成的，防止退出被阻塞。
注意：会话退出时，缓存中的会话信息已经删除，但是异步线程还未执行，数据库中的会话信息还存在，此时渗透测试来激活会话时是可以激活成功的，由于存在安全风险，故在删除会话缓存信息的时候，将已删除的会话ID保存在另一个缓存中，当激活会话的时候做相应判断，如果来激活的会话ID在已删除的会话缓存中，就返回激活失败。
	删除会话
会话什么时候会被删除？
正常退出（CMD_SM_SessionManager_logout 69503）。
用户被设为无效，用户无效后，定时器会将该无效用户的会话删除，定时器在服务启动3分钟后开始，1分钟触发一次。
用户被删除，删除用户时，缓存中该用户的会话立刻会被清除，但是数据库中的会话信息会在定时器中删除，定时器在服务启动3分钟后开始，1分钟触发一次。
会话不在线时间达到5天。当用户不在线时间（不能重启服务，重启服务后会将失效会话的时间置为服务启动时间）达到5天时，定时器会将会话从数据库和缓存中删除，定时器每天0点启动，24小时触发一次。

二、会话模式
会话模式：会话模式是安全模块提供的控制会话管理的方式。
单会话模式：一个用户只允许建立一个会话。
多会话模式：一个用户可以建立多个会话。
注意：
（1）单用户模式是指只允许一个系统管理员登录一个会话，只有一个用户可以登录，也只有系统管理员可以设置单用户模式；单会话模式是指一个用户只能建立一个会话，但可以有多个用户登录。
（2）单用户模式是为I2000动态升级而做的需求，后来也应用于其他的应用场景，现在升级场景下只有M2000的部分会使用受限模式，其他产品线的升级操作是需要停服务的。
配置会话模式
（1）修改配置文件
文件名称
IMAP_smsvc.xml
文件路径
$IMAP_ROOT/etc/conf/
文件内容
         <param name="SessionMode">Multiple</param>
         <param name="SystemMode">Multiple</param>
         <param name="LoginMode">Local</param>
         ......
         <param name="isUserNameSensitive">NO</param>
         <param name="TimeOfSessionCallBack">12</param>
         <param name="SendAlarmFlag">1</param>
         <param name="LimitGrantFlag">1</param>
  <!--<param name="ActiveSessionFlag">0</param>-->
SessionMode：Multiple为多会话模式，Single 单会话模式。
TimeOfSessionCallBack：通知DS会话失效的时间，如果安全server5分钟没有收到会话心跳，则在该配置项的值*5分钟时将会话状态置为SM_BE_CALLBACKBYCONF（15），并发送会话失效事件，通知DS清除该会话的相关信息。
ActiveSessionFlag：配置会话失效后是否激活或重建会话，0表示会话失效后不再进行激活或重建会话；1表示会话失效后能够激活或重建会话。该项存在默认配置为0（注释掉），在初始化时，如果未能从数据库中获取到该项的值，则取默认值1，处理为激活。
（2）注册信息到数据库
使用SettingTool工具将信息注册到数据库中，命令如下：
SettingTool -cmd import -file IMAP_smsvc.xml
（3）重启网管

三、会话监控
会话监控：管理员通过会话监控来查看和控制可见的会话，客户端每2秒刷新一次会话监控界面。
主要功能
（1）会话监控
管理员可以实现对当前会话进行监控，操作入口：网管安全>>监控用户会话，监控界面如下：
（2）强制会话退出
在会话监控界面，管理员可以强制踢出某个会话，操作入口：网管安全>>监控用户会话，界面操作如下：
（3）用户组最大会话数
对于具体用户组可以设置用户组的最大在线会话数，默认配置为不限制。操作入口：安全管理>>网管安全管理>>用户组>>常规页签，界面如下：
（4）最大在线数和最大会话数的区别
两者针对的对象不同，最大会话数针对于用户组而设置，最大在线数针对具体用户而设置。
意义不同，最大会话数限制了用户组最大的在线会话数，即属于该用户组的所有用户会话数总和不能超过该限制；最大在线数则限制了单个用户的最大同时在线会话数。
界面入口不同，最大在线数在用户管理界面的常规页签进行设置；最大会话数在用户组管理界面的常规页签设置。
数据存储位置不同，用户最大在线数存储在tbl_SMUser表中；用户组最大会话数存储在tbl_SMGroup表中。
（5）注意事项
系统管理员是不受用户组最大会话数的限制的，如：设置Administrators组的最大会话数为1，系统管理员可以登录1个以上。
会话监控界面只能看到在数据库中isNeedShow值为1的会话（一般是客户端登录产生的会话，即调用viewlogin登录的会话）。
当会话在5分钟内没有刷新心跳，则该会话会从监控会话界面消失，被系统定时器休眠。

四、会话状态（生命周期）
会话状态：会话生命周期中所具有的各种不同行为的状态。
会话状态
（1）会话状态总体介绍
状态
描述
SM_R_PASS = 1
token有效，当前在线正在使用的会话
SM_R_INVALID = 2
不是一种会话状态，当checkToken因为会话不在线而失败、超过30分钟来激活或重建会话而失败、刷新会话心跳时在缓存中未找到会话时返回 的错误码。
SM_R_INACTIVE = 3
token对应的终端被锁（现在该状态已经没有实际用处，作为一种返回码，对应的用户的状态USER_LOCK也无用处）
SM_BE_KICKOUT = 4
会话被其他用户踢出而失效
SM_BE_SINGLEMODE = 5
由于设置单用户模式会话被踢出而失效
SM_BE_CALLBACK = 6
5分钟内未刷新心跳、或者安全服务停止，会话被休眠而失效
SM_BE_UNKNOWN = 7
未知的失效原因
SM_BE_DISABLE = 8
将用户账号设为无效，会话失效
SM_BE_DELETED = 9
用户不存在（被删除），会话失效
SM_BE_SIGNLESESSION = 10
在单会话模式时登录返回的会话状态
SM_BE_OVER_MAXSESSION = 11
登录或激活会话时，超过用户组的最大会话数返回的会话状态
SM_BE_OVER_MAXLINK = 12
超过最大连接数（没有使用）
SM_BE_NOT_IN_DURATION = 13
用户不在登录时段返回的会话状态
SM_BE_OVER_CLIENTTYPE_LINK = 14
超过客户端类型的最大连接数返回的会话状态
SM_BE_CALLBACKBYCONF = 15
会话休眠一个小时后的状态
SM_BE_OVER_USER_LINK = 16
超过用户的最大在线数，会话失效
SM_BE_TEMP = 17
临时会话（登录需要更新license、既需要修改密码又需要更新License，修改密码后将会话状态置为临时会话，然后去更新license）
SM_BE_MUSTCHANGEPWD = 18
密码过期或者下次登录必须修改密码时的会话状态
SM_BE_MUSTCHANGEPWDAndUPDATELICENSE = 19
既需要修改密码又需要更新License时的会话状态
（2）会话状态详解
SM_BE_KICKOUT = 4 ：会话被其他用户踢出，监控用户会话界面上的“强制用户注销登录”、系统管理员登录时license达到最大限制时踢出会话，被踢出用户的会话立即被设置为SM_BE_KICKOUT。
监控用户会话界面上的“强制用户注销登录”
系统管理员登录时license达到最大限制时踢出会话：
SM_BE_SINGLEMODE = 5 ：设置系统模式为单用户模式时导致用户会话被踢出的状态，只有admin用户可以设置系统模式，除设置系统模式的当前用户的当前会话外，其他所有的在线、休眠、下次登录必须修改密码状态的会话都会被踢出。
SM_BE_CALLBACK = 6 ：休眠状态，发生下列事件时，会话进入休眠状态
 安全服务停止，正常停止安全服务时将数据库中所有活动会话的状态置为休眠。
当在线会话超过5分钟没有刷新心跳时，会话状态自动变为休眠。
SM_BE_DISABLE = 8 ：用户被设为无效。当用户被设为无效时，该用户对应的所有会话的状态都会被置为SM_BE_DISABLE。发生下列事件时，会话状态会变为无效用户状态
修改用户属性，将用户暂停使用
设置非活动用户策略，包括用户的非活动用户策略和系统的非活动用户策略。当设置非活动用户策略为多少天未登录就暂停用户时，如果该用户被暂停，则对应的会话会被设置为SM_BE_DISABLE
SM_BE_TEMP = 17 ：临时会话
当登录时因为客户端连接数已经达到license的最大限制需要踢出其他会话或者因为license无效需要更新license时，当前登录都会产生一个临时会话，用来踢出其他会话或者更新License的操作。临时会话产生4分钟后，该会话就会被删除，所以上面描述的踢出其他会话或者更新license的操作必须在4分钟之内完成，否则就会校验不过。
SM_BE_MUSTCHANGEPWD = 18 ：密码过期或者下次登录必须修改密码时的会话状态



      
	  
